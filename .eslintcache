[{"/Users/jamesmcnamara/Documents/fam-photos/src/reportWebVitals.js":"1","/Users/jamesmcnamara/Documents/fam-photos/src/App.js":"2","/Users/jamesmcnamara/Documents/fam-photos/src/components/GDImageViewer.js":"3","/Users/jamesmcnamara/Documents/fam-photos/src/index.js":"4","/Users/jamesmcnamara/Documents/fam-photos/src/components/NormalImageList.js":"5"},{"size":362,"mtime":1608675465027,"results":"6","hashOfConfig":"7"},{"size":449,"mtime":1608677752984,"results":"8","hashOfConfig":"7"},{"size":5419,"mtime":1608676895663,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1608675465027,"results":"10","hashOfConfig":"7"},{"size":935,"mtime":1608678403567,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1cpye2b",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamesmcnamara/Documents/fam-photos/src/reportWebVitals.js",[],["27","28"],"/Users/jamesmcnamara/Documents/fam-photos/src/App.js",["29","30","31"],"import logo from './logo.svg';\nimport './App.css';\nimport GDImageViewer, { required_fields_object } from './components/GDImageViewer';\nimport NormalImageList from './components/NormalImageList';\nimport './components/GDImageViewer.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>McNamara fam photos</h1>\n        <NormalImageList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["32","33"],"/Users/jamesmcnamara/Documents/fam-photos/src/components/GDImageViewer.js",["34","35"],"import React, { useEffect, useState } from \"react\";\nimport * as R from 'ramda'\nimport \"./GDImageViewer.css\";\n\nconst options = {\n  // react style object\n  // https://reactjs.org/docs/dom-elements.html#style\n\n  style: {\n  },\n  // behavior when image is clicked\n  // if on click is empty (no modal or newWindow)\n  // current tab will show full image\n  // if modal true, image opens as overlay\n  // on current tab\n  // if new window is true, new tab is launched\n  // with image url\n  onClick: {\n      modal: false,\n      newWindow: false\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  // specify which images not to render\n  exclude: {\n      \"1.jpg\": true\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach className attribute to a specific image\n  attachClass: {\n      \"2.jpg\": \"test\"\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach id attribute to a specific image\n  attachId: {\n      \"2.jpg\": \"test2\"\n  },\n  // if set true, hover over opacity effect\n  // will be set\n  hover: true\n};\n\nexport const required_fields_object = {\n  gkey: \"{GOOGLE_API_KEY}\",\n  dirId: \"{GOOGLE_DRIVE_PUBLIC_DIRECTORY_ID}\",\n  name: \"name1\",\n  options: options,\n};\n\n\nfunction GDImageViewer(data) {\n  const [imgIds, setImgIds] = useState([]);\n\n  const [style, setStyle] = useState({});\n\n  const [hover, setHover] = useState(false);\n\n  const [newWindow, setNewWindw] = useState(false);\n\n  const [clickable, setClickable] = useState(false);\n\n  const [modal, setModal] = useState(false);\n\n  const [showHeader, setShowHeader] = useState(null);\n\n  const [classNames, setClassNames] = useState(null);\n\n  const [ids, setIds] = useState(null);\n\n  const [excludes, setExcludes] = useState(null);\n\n  const GOOGLE_API_KEY = data.data.gkey;\n  const GOOGLE_DRIVE_URL_START =\n    \"https://www.googleapis.com/drive/v2/files?q=%27\";\n  const GOOGLE_DRIVE_URL_END = \"%27+in+parents&key=\";\n  const GOOGLE_DRIVE_IMG_URL = \"http://drive.google.com/uc?export=view&id=\";\n\n  const options = data.data.options;\n  const header = data.data.header;\n  useEffect(() => {\n    loadData();\n    loadSettings(options);\n  }, []);\n\n  function loadSettings(options) {\n    if (options.style) {\n      setStyle(options.style);\n    }\n    if (options.onClick) {\n      setClickable(true);\n      if (options.onClick.newWindow) {\n        setNewWindw(true);\n      }\n      if (options.onClick.modal) {\n        setModal(true);\n      }\n    }\n    if (options.hover) {\n      setHover(true);\n    }\n    if (header) {\n      setShowHeader(true);\n    }\n\n    if (options.attachClass) {\n      setClassNames(options.attachClass);\n    }\n\n    if (options.attachId) {\n      setIds(options.attachId);\n    }\n    if (options.exclude) {\n      setExcludes(options.exclude);\n    }\n  }\n\n  async function loadData() {\n    await fetch(\n      GOOGLE_DRIVE_URL_START +\n      data.data.dirId +\n      GOOGLE_DRIVE_URL_END +\n      GOOGLE_API_KEY\n    )\n      .then(response => response.json())\n      .then(jsonResp => {\n        setImgIds(jsonResp.items);\n      });\n  }\n\n  function checkFormat(url) {\n    return url.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n  }\n\n  function ModalView(props) {\n    return (\n      <div>\n        <div id=\"modal-container\" className=\"modal\">\n          <span className=\"close\">&times;</span>\n          <img className=\"modal-content\" id=\"curr-modal\" alt=\"\" />\n          <div id=\"caption\" />\n        </div>\n      </div>\n    );\n  }\n\n  function showModal(imgId) {\n    const modal = document.getElementById(\"modal-container\");\n    const modalImg = document.getElementById(\"curr-modal\");\n    modalImg.src = imgId;\n    modal.style.display = \"block\";\n    const span = document.getElementsByClassName(\"close\")[0];\n    span.onclick = function () {\n      modal.style.display = \"none\";\n    };\n  }\n\n  const renderImages = (className, id, exclude, item ,i) => {\n    return (\n      <>\n        {!exclude && (\n          <img\n            style={style}\n            className={\n              (clickable ? \" gd-pointer \" : \"\") +\n              (\" gd-img \") +\n              (hover ? \" gd-pointer gd-hover \" : \"\") + className\n            }\n            onClick={() => {\n              modal && showModal(GOOGLE_DRIVE_IMG_URL + item.id);\n            }}\n            src={GOOGLE_DRIVE_IMG_URL + item.id}\n            id={id ? id : null}\n            key={i}\n            alt={item.title}\n          />\n        )}\n      </>\n    )\n\n  }\n\n  const renderMain = (className, id, exclude, href, target, item, i) => {\n    if (!R.isEmpty(href)) {\n      return (\n        <a\n          href={href}\n          target={target}\n        >\n          {renderImages(className, id, exclude, item, i)}\n        </a>\n      )\n    }\n    return (\n      renderImages(className, id, exclude, item, i)\n    )\n  }\n\n  return (\n    <div>\n      <h2>{showHeader && header}</h2>\n\n      {modal && <ModalView />}\n\n      {imgIds &&\n        imgIds.map((item, i) => {\n          const title = R.propOr(\"\", \"title\", item)\n          if (checkFormat(item.title)) {\n            const className = R.propOr(\"\", title, classNames)\n            const id = R.propOr(\"\", title, ids)\n            const exclude = R.propOr(\"\", title, excludes);\n            const href = !modal && clickable ? GOOGLE_DRIVE_IMG_URL + item.id : \"\"\n            const target = newWindow ? \"_blank\" : \"\"\n            return(renderMain(className, id, exclude, href, target, item, i))\n          }\n        })}\n    </div>\n  );\n}\n\nexport default GDImageViewer;\n","/Users/jamesmcnamara/Documents/fam-photos/src/index.js",[],["36","37"],"/Users/jamesmcnamara/Documents/fam-photos/src/components/NormalImageList.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"42","severity":1,"message":"46","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":21},{"ruleId":"42","severity":1,"message":"47","line":3,"column":25,"nodeType":"44","messageId":"45","endLine":3,"endColumn":47},{"ruleId":"38","replacedBy":"48"},{"ruleId":"40","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":82,"column":6,"nodeType":"52","endLine":82,"endColumn":8,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":204,"column":30,"nodeType":"56","messageId":"57","endLine":204,"endColumn":32},{"ruleId":"38","replacedBy":"58"},{"ruleId":"40","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'GDImageViewer' is defined but never used.","'required_fields_object' is defined but never used.",["60"],["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadData', 'loadSettings', and 'options'. Either include them or remove the dependency array.","ArrayExpression",["62"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [loadData, loadSettings, options]",{"range":"65","text":"66"},[2120,2122],"[loadData, loadSettings, options]"]