{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@material-ui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport badgeUnstyledClasses, { getBadgeUtilityClass } from './badgeUnstyledClasses';\n\nconst useBadgeClasses = props => {\n  const {\n    variant,\n    anchorOrigin,\n    overlap,\n    invisible,\n    classes = {}\n  } = props;\n  const utilityClasses = {\n    root: clsx(badgeUnstyledClasses['root'], classes['root']),\n    badge: clsx(badgeUnstyledClasses['badge'], classes['badge'], getBadgeUtilityClass(variant), badgeUnstyledClasses[`anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`], classes[`anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`], invisible && [badgeUnstyledClasses['invisible'], classes.invisible])\n  };\n  return utilityClasses;\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp = {},\n    badgeContent: badgeContentProp,\n    component: Component = 'span',\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    overlap: overlapProp = 'rectangular',\n    showZero = false,\n    variant: variantProp = 'standard',\n\n    /* eslint-disable react/prop-types */\n    theme\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"]);\n\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const {\n    anchorOrigin = anchorOriginProp,\n    badgeContent,\n    max = maxProp,\n    overlap = overlapProp,\n    variant = variantProp\n  } = invisible ? prevProps : props;\n\n  const stateAndProps = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    invisible,\n    max,\n    overlap,\n    variant\n  });\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  const classes = useBadgeClasses(_extends({}, stateAndProps, {\n    classes: classesProp\n  }));\n  const Root = components.Root || Component;\n  const rootProps = componentsProps.root || {};\n  const Badge = components.Badge || 'span';\n  const badgeProps = componentsProps.badge || {};\n  return /*#__PURE__*/React.createElement(Root, _extends({}, rootProps, !isHostComponent(Root) && {\n    as: Component,\n    styleProps: _extends({}, stateAndProps, rootProps.styleProps),\n    theme\n  }, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className)\n  }), children, /*#__PURE__*/React.createElement(Badge, _extends({}, badgeProps, !isHostComponent(Badge) && {\n    styleProps: _extends({}, stateAndProps, badgeProps.styleProps),\n    theme\n  }, {\n    className: clsx(classes.badge, badgeProps.className)\n  }), displayValue));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])\n} : void 0;\nexport default BadgeUnstyled;","map":{"version":3,"sources":["/Users/jamesmcnamara/Documents/fam-photos/node_modules/@material-ui/unstyled/BadgeUnstyled/BadgeUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","unstable_capitalize","capitalize","usePreviousProps","isHostComponent","badgeUnstyledClasses","getBadgeUtilityClass","useBadgeClasses","props","variant","anchorOrigin","overlap","invisible","classes","utilityClasses","root","badge","vertical","horizontal","BadgeUnstyled","forwardRef","ref","anchorOriginProp","classesProp","badgeContent","badgeContentProp","component","Component","children","className","components","componentsProps","invisibleProp","max","maxProp","overlapProp","showZero","variantProp","theme","other","prevProps","stateAndProps","displayValue","Root","rootProps","Badge","badgeProps","createElement","as","styleProps","process","env","NODE_ENV","propTypes","shape","oneOf","isRequired","node","object","string","elementType","bool","number","oneOfType"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,EAA4CC,gBAA5C,QAAoE,oBAApE;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,oBAAP,IAA+BC,oBAA/B,QAA2D,wBAA3D;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,OAAO,GAAG;AALN,MAMFL,KANJ;AAOA,QAAMM,cAAc,GAAG;AACrBC,IAAAA,IAAI,EAAEf,IAAI,CAACK,oBAAoB,CAAC,MAAD,CAArB,EAA+BQ,OAAO,CAAC,MAAD,CAAtC,CADW;AAErBG,IAAAA,KAAK,EAAEhB,IAAI,CAACK,oBAAoB,CAAC,OAAD,CAArB,EAAgCQ,OAAO,CAAC,OAAD,CAAvC,EAAkDP,oBAAoB,CAACG,OAAD,CAAtE,EAAiFJ,oBAAoB,CAAE,eAAcH,UAAU,CAACQ,YAAY,CAACO,QAAd,CAAwB,GAAEf,UAAU,CAACQ,YAAY,CAACQ,UAAd,CAA0B,GAAEhB,UAAU,CAACS,OAAD,CAAU,EAA9G,CAArG,EAAuNE,OAAO,CAAE,eAAcX,UAAU,CAACQ,YAAY,CAACO,QAAd,CAAwB,GAAEf,UAAU,CAACQ,YAAY,CAACQ,UAAd,CAA0B,GAAEhB,UAAU,CAACS,OAAD,CAAU,EAA9G,CAA9N,EAAgVC,SAAS,IAAI,CAACP,oBAAoB,CAAC,WAAD,CAArB,EAAoCQ,OAAO,CAACD,SAA5C,CAA7V;AAFU,GAAvB;AAIA,SAAOE,cAAP;AACD,CAbD;;AAeA,MAAMK,aAAa,GAAG,aAAarB,KAAK,CAACsB,UAAN,CAAiB,SAASD,aAAT,CAAuBX,KAAvB,EAA8Ba,GAA9B,EAAmC;AACrF,QAAM;AACJX,IAAAA,YAAY,EAAEY,gBAAgB,GAAG;AAC/BL,MAAAA,QAAQ,EAAE,KADqB;AAE/BC,MAAAA,UAAU,EAAE;AAFmB,KAD7B;AAKJL,IAAAA,OAAO,EAAEU,WAAW,GAAG,EALnB;AAMJC,IAAAA,YAAY,EAAEC,gBANV;AAOJC,IAAAA,SAAS,EAAEC,SAAS,GAAG,MAPnB;AAQJC,IAAAA,QARI;AASJC,IAAAA,SATI;AAUJC,IAAAA,UAAU,GAAG,EAVT;AAWJC,IAAAA,eAAe,GAAG,EAXd;AAYJnB,IAAAA,SAAS,EAAEoB,aAZP;AAaJC,IAAAA,GAAG,EAAEC,OAAO,GAAG,EAbX;AAcJvB,IAAAA,OAAO,EAAEwB,WAAW,GAAG,aAdnB;AAeJC,IAAAA,QAAQ,GAAG,KAfP;AAgBJ3B,IAAAA,OAAO,EAAE4B,WAAW,GAAG,UAhBnB;;AAkBJ;AACAC,IAAAA;AAnBI,MAoBF9B,KApBJ;AAAA,QAqBM+B,KAAK,GAAG1C,6BAA6B,CAACW,KAAD,EAAQ,CAAC,cAAD,EAAiB,SAAjB,EAA4B,cAA5B,EAA4C,WAA5C,EAAyD,UAAzD,EAAqE,WAArE,EAAkF,YAAlF,EAAgG,iBAAhG,EAAmH,WAAnH,EAAgI,KAAhI,EAAuI,SAAvI,EAAkJ,UAAlJ,EAA8J,SAA9J,EAAyK,OAAzK,CAAR,CArB3C;;AAuBA,QAAMgC,SAAS,GAAGrC,gBAAgB,CAAC;AACjCO,IAAAA,YAAY,EAAEY,gBADmB;AAEjCE,IAAAA,YAAY,EAAEC,gBAFmB;AAGjCQ,IAAAA,GAAG,EAAEC,OAH4B;AAIjCvB,IAAAA,OAAO,EAAEwB,WAJwB;AAKjC1B,IAAAA,OAAO,EAAE4B;AALwB,GAAD,CAAlC;AAOA,MAAIzB,SAAS,GAAGoB,aAAhB;;AAEA,MAAIA,aAAa,IAAI,IAAjB,KAA0BP,gBAAgB,KAAK,CAArB,IAA0B,CAACW,QAA3B,IAAuCX,gBAAgB,IAAI,IAApB,IAA4BY,WAAW,KAAK,KAA7G,CAAJ,EAAyH;AACvHzB,IAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAM;AACJF,IAAAA,YAAY,GAAGY,gBADX;AAEJE,IAAAA,YAFI;AAGJS,IAAAA,GAAG,GAAGC,OAHF;AAIJvB,IAAAA,OAAO,GAAGwB,WAJN;AAKJ1B,IAAAA,OAAO,GAAG4B;AALN,MAMFzB,SAAS,GAAG4B,SAAH,GAAehC,KAN5B;;AAQA,QAAMiC,aAAa,GAAG7C,QAAQ,CAAC,EAAD,EAAKY,KAAL,EAAY;AACxCE,IAAAA,YADwC;AAExCc,IAAAA,YAFwC;AAGxCZ,IAAAA,SAHwC;AAIxCqB,IAAAA,GAJwC;AAKxCtB,IAAAA,OALwC;AAMxCF,IAAAA;AANwC,GAAZ,CAA9B;;AASA,MAAIiC,YAAY,GAAG,EAAnB;;AAEA,MAAIjC,OAAO,KAAK,KAAhB,EAAuB;AACrBiC,IAAAA,YAAY,GAAGlB,YAAY,GAAGS,GAAf,GAAsB,GAAEA,GAAI,GAA5B,GAAiCT,YAAhD;AACD;;AAED,QAAMX,OAAO,GAAGN,eAAe,CAACX,QAAQ,CAAC,EAAD,EAAK6C,aAAL,EAAoB;AAC1D5B,IAAAA,OAAO,EAAEU;AADiD,GAApB,CAAT,CAA/B;AAGA,QAAMoB,IAAI,GAAGb,UAAU,CAACa,IAAX,IAAmBhB,SAAhC;AACA,QAAMiB,SAAS,GAAGb,eAAe,CAAChB,IAAhB,IAAwB,EAA1C;AACA,QAAM8B,KAAK,GAAGf,UAAU,CAACe,KAAX,IAAoB,MAAlC;AACA,QAAMC,UAAU,GAAGf,eAAe,CAACf,KAAhB,IAAyB,EAA5C;AACA,SAAO,aAAalB,KAAK,CAACiD,aAAN,CAAoBJ,IAApB,EAA0B/C,QAAQ,CAAC,EAAD,EAAKgD,SAAL,EAAgB,CAACxC,eAAe,CAACuC,IAAD,CAAhB,IAA0B;AAC9FK,IAAAA,EAAE,EAAErB,SAD0F;AAE9FsB,IAAAA,UAAU,EAAErD,QAAQ,CAAC,EAAD,EAAK6C,aAAL,EAAoBG,SAAS,CAACK,UAA9B,CAF0E;AAG9FX,IAAAA;AAH8F,GAA1C,EAInD;AACDjB,IAAAA,GAAG,EAAEA;AADJ,GAJmD,EAMnDkB,KANmD,EAM5C;AACRV,IAAAA,SAAS,EAAE7B,IAAI,CAACa,OAAO,CAACE,IAAT,EAAe6B,SAAS,CAACf,SAAzB,EAAoCA,SAApC;AADP,GAN4C,CAAlC,EAQhBD,QARgB,EAQN,aAAa9B,KAAK,CAACiD,aAAN,CAAoBF,KAApB,EAA2BjD,QAAQ,CAAC,EAAD,EAAKkD,UAAL,EAAiB,CAAC1C,eAAe,CAACyC,KAAD,CAAhB,IAA2B;AACxGI,IAAAA,UAAU,EAAErD,QAAQ,CAAC,EAAD,EAAK6C,aAAL,EAAoBK,UAAU,CAACG,UAA/B,CADoF;AAExGX,IAAAA;AAFwG,GAA5C,EAG3D;AACDT,IAAAA,SAAS,EAAE7B,IAAI,CAACa,OAAO,CAACG,KAAT,EAAgB8B,UAAU,CAACjB,SAA3B;AADd,GAH2D,CAAnC,EAKvBa,YALuB,CARP,CAApB;AAcD,CAjFkC,CAAnC;AAkFAQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjC,aAAa,CAACkC,SAAd,GAA0B;AAChE;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE3C,EAAAA,YAAY,EAAEX,SAAS,CAACuD,KAAV,CAAgB;AAC5BpC,IAAAA,UAAU,EAAEnB,SAAS,CAACwD,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,EAAmCC,UADnB;AAE5BvC,IAAAA,QAAQ,EAAElB,SAAS,CAACwD,KAAV,CAAgB,CAAC,QAAD,EAAW,KAAX,CAAhB,EAAmCC;AAFjB,GAAhB,CAbkD;;AAkBhE;AACF;AACA;AACEhC,EAAAA,YAAY,EAAEzB,SAAS,CAAC0D,IArBwC;;AAuBhE;AACF;AACA;AACE7B,EAAAA,QAAQ,EAAE7B,SAAS,CAAC0D,IA1B4C;;AA4BhE;AACF;AACA;AACA;AACE5C,EAAAA,OAAO,EAAEd,SAAS,CAAC2D,MAhC6C;;AAkChE;AACF;AACA;AACE7B,EAAAA,SAAS,EAAE9B,SAAS,CAAC4D,MArC2C;;AAuChE;AACF;AACA;AACA;AACEjC,EAAAA,SAAS,EAAE3B,SAAS,CAAC6D,WA3C2C;;AA6ChE;AACF;AACA;AACA;AACA;AACE9B,EAAAA,UAAU,EAAE/B,SAAS,CAACuD,KAAV,CAAgB;AAC1BT,IAAAA,KAAK,EAAE9C,SAAS,CAAC6D,WADS;AAE1BjB,IAAAA,IAAI,EAAE5C,SAAS,CAAC6D;AAFU,GAAhB,CAlDoD;;AAuDhE;AACF;AACA;AACA;AACE7B,EAAAA,eAAe,EAAEhC,SAAS,CAAC2D,MA3DqC;;AA6DhE;AACF;AACA;AACE9C,EAAAA,SAAS,EAAEb,SAAS,CAAC8D,IAhE2C;;AAkEhE;AACF;AACA;AACA;AACE5B,EAAAA,GAAG,EAAElC,SAAS,CAAC+D,MAtEiD;;AAwEhE;AACF;AACA;AACA;AACEnD,EAAAA,OAAO,EAAEZ,SAAS,CAACwD,KAAV,CAAgB,CAAC,UAAD,EAAa,aAAb,CAAhB,CA5EuD;;AA8EhE;AACF;AACA;AACA;AACEnB,EAAAA,QAAQ,EAAErC,SAAS,CAAC8D,IAlF4C;;AAoFhE;AACF;AACA;AACA;AACEpD,EAAAA,OAAO,EAAEV;AACT;AADkB,GAEjBgE,SAFQ,CAEE,CAAChE,SAAS,CAACwD,KAAV,CAAgB,CAAC,KAAD,EAAQ,UAAR,CAAhB,CAAD,EAAuCxD,SAAS,CAAC4D,MAAjD,CAFF;AAxFuD,CAAlE,GA2FI,KAAK,CA3FT;AA4FA,eAAexC,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@material-ui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport badgeUnstyledClasses, { getBadgeUtilityClass } from './badgeUnstyledClasses';\n\nconst useBadgeClasses = props => {\n  const {\n    variant,\n    anchorOrigin,\n    overlap,\n    invisible,\n    classes = {}\n  } = props;\n  const utilityClasses = {\n    root: clsx(badgeUnstyledClasses['root'], classes['root']),\n    badge: clsx(badgeUnstyledClasses['badge'], classes['badge'], getBadgeUtilityClass(variant), badgeUnstyledClasses[`anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`], classes[`anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`], invisible && [badgeUnstyledClasses['invisible'], classes.invisible])\n  };\n  return utilityClasses;\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp = {},\n    badgeContent: badgeContentProp,\n    component: Component = 'span',\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    overlap: overlapProp = 'rectangular',\n    showZero = false,\n    variant: variantProp = 'standard',\n\n    /* eslint-disable react/prop-types */\n    theme\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"]);\n\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const {\n    anchorOrigin = anchorOriginProp,\n    badgeContent,\n    max = maxProp,\n    overlap = overlapProp,\n    variant = variantProp\n  } = invisible ? prevProps : props;\n\n  const stateAndProps = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    invisible,\n    max,\n    overlap,\n    variant\n  });\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  const classes = useBadgeClasses(_extends({}, stateAndProps, {\n    classes: classesProp\n  }));\n  const Root = components.Root || Component;\n  const rootProps = componentsProps.root || {};\n  const Badge = components.Badge || 'span';\n  const badgeProps = componentsProps.badge || {};\n  return /*#__PURE__*/React.createElement(Root, _extends({}, rootProps, !isHostComponent(Root) && {\n    as: Component,\n    styleProps: _extends({}, stateAndProps, rootProps.styleProps),\n    theme\n  }, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className)\n  }), children, /*#__PURE__*/React.createElement(Badge, _extends({}, badgeProps, !isHostComponent(Badge) && {\n    styleProps: _extends({}, stateAndProps, badgeProps.styleProps),\n    theme\n  }, {\n    className: clsx(classes.badge, badgeProps.className)\n  }), displayValue));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])\n} : void 0;\nexport default BadgeUnstyled;"]},"metadata":{},"sourceType":"module"}