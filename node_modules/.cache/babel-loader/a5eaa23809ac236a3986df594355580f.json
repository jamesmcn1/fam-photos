{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jamesmcnamara/Documents/fam-photos/src/components/GDImageViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as R from 'ramda';\nimport \"./GDImageViewer.css\";\nconst options = {\n  // react style object\n  // https://reactjs.org/docs/dom-elements.html#style\n  style: {},\n  // behavior when image is clicked\n  // if on click is empty (no modal or newWindow)\n  // current tab will show full image\n  // if modal true, image opens as overlay\n  // on current tab\n  // if new window is true, new tab is launched\n  // with image url\n  onClick: {\n    modal: false,\n    newWindow: false\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  // specify which images not to render\n  exclude: {\n    \"1.jpg\": true\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach className attribute to a specific image\n  attachClass: {\n    \"2.jpg\": \"test\"\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach id attribute to a specific image\n  attachId: {\n    \"2.jpg\": \"test2\"\n  },\n  // if set true, hover over opacity effect\n  // will be set\n  hover: true\n};\nexport const required_fields_object = {\n  gkey: \"{GOOGLE_API_KEY}\",\n  dirId: \"{GOOGLE_DRIVE_PUBLIC_DIRECTORY_ID}\",\n  name: \"name1\",\n  options: options\n};\n\nfunction GDImageViewer(data) {\n  _s();\n\n  const [imgIds, setImgIds] = useState([]);\n  const [style, setStyle] = useState({});\n  const [hover, setHover] = useState(false);\n  const [newWindow, setNewWindw] = useState(false);\n  const [clickable, setClickable] = useState(false);\n  const [modal, setModal] = useState(false);\n  const [showHeader, setShowHeader] = useState(null);\n  const [classNames, setClassNames] = useState(null);\n  const [ids, setIds] = useState(null);\n  const [excludes, setExcludes] = useState(null);\n  const GOOGLE_API_KEY = data.data.gkey;\n  const GOOGLE_DRIVE_URL_START = \"https://www.googleapis.com/drive/v2/files?q=%27\";\n  const GOOGLE_DRIVE_URL_END = \"%27+in+parents&key=\";\n  const GOOGLE_DRIVE_IMG_URL = \"http://drive.google.com/uc?export=view&id=\";\n  const options = data.data.options;\n  const header = data.data.header;\n  useEffect(() => {\n    loadData();\n    loadSettings(options);\n  }, []);\n\n  function loadSettings(options) {\n    if (options.style) {\n      setStyle(options.style);\n    }\n\n    if (options.onClick) {\n      setClickable(true);\n\n      if (options.onClick.newWindow) {\n        setNewWindw(true);\n      }\n\n      if (options.onClick.modal) {\n        setModal(true);\n      }\n    }\n\n    if (options.hover) {\n      setHover(true);\n    }\n\n    if (header) {\n      setShowHeader(true);\n    }\n\n    if (options.attachClass) {\n      setClassNames(options.attachClass);\n    }\n\n    if (options.attachId) {\n      setIds(options.attachId);\n    }\n\n    if (options.exclude) {\n      setExcludes(options.exclude);\n    }\n  }\n\n  async function loadData() {\n    await fetch(GOOGLE_DRIVE_URL_START + data.data.dirId + GOOGLE_DRIVE_URL_END + GOOGLE_API_KEY).then(response => response.json()).then(jsonResp => {\n      setImgIds(jsonResp.items);\n    });\n  }\n\n  function checkFormat(url) {\n    return url.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n  }\n\n  function ModalView(props) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"modal-container\",\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"modal-content\",\n          id: \"curr-modal\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"caption\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n  function showModal(imgId) {\n    const modal = document.getElementById(\"modal-container\");\n    const modalImg = document.getElementById(\"curr-modal\");\n    modalImg.src = imgId;\n    modal.style.display = \"block\";\n    const span = document.getElementsByClassName(\"close\")[0];\n\n    span.onclick = function () {\n      modal.style.display = \"none\";\n    };\n  }\n\n  const renderImages = (className, id, exclude, item, i) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !exclude && /*#__PURE__*/_jsxDEV(\"img\", {\n        style: style,\n        className: (clickable ? \" gd-pointer \" : \"\") + \" gd-img \" + (hover ? \" gd-pointer gd-hover \" : \"\") + className,\n        onClick: () => {\n          modal && showModal(GOOGLE_DRIVE_IMG_URL + item.id);\n        },\n        src: GOOGLE_DRIVE_IMG_URL + item.id,\n        id: id ? id : null,\n        alt: item.title\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  };\n\n  const renderMain = (className, id, exclude, href, target, item, i) => {\n    if (!R.isEmpty(href)) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: href,\n        target: target,\n        children: renderImages(className, id, exclude, item, i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this);\n    }\n\n    return renderImages(className, id, exclude, item, i);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: showHeader && header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), modal && /*#__PURE__*/_jsxDEV(ModalView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this), imgIds && imgIds.map((item, i) => {\n      const title = R.propOr(\"\", \"title\", item);\n\n      if (checkFormat(item.title)) {\n        const className = R.propOr(\"\", title, classNames);\n        const id = R.propOr(\"\", title, ids);\n        const exclude = R.propOr(\"\", title, excludes);\n        const href = !modal && clickable ? GOOGLE_DRIVE_IMG_URL + item.id : \"\";\n        const target = newWindow ? \"_blank\" : \"\";\n        return renderMain(className, id, exclude, href, target, item, i);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GDImageViewer, \"XpBtbzuIftlsSJbDEAGQyjRBKq4=\");\n\n_c = GDImageViewer;\nexport default GDImageViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GDImageViewer\");","map":{"version":3,"sources":["/Users/jamesmcnamara/Documents/fam-photos/src/components/GDImageViewer.js"],"names":["React","useEffect","useState","R","options","style","onClick","modal","newWindow","exclude","attachClass","attachId","hover","required_fields_object","gkey","dirId","name","GDImageViewer","data","imgIds","setImgIds","setStyle","setHover","setNewWindw","clickable","setClickable","setModal","showHeader","setShowHeader","classNames","setClassNames","ids","setIds","excludes","setExcludes","GOOGLE_API_KEY","GOOGLE_DRIVE_URL_START","GOOGLE_DRIVE_URL_END","GOOGLE_DRIVE_IMG_URL","header","loadData","loadSettings","fetch","then","response","json","jsonResp","items","checkFormat","url","match","ModalView","props","showModal","imgId","document","getElementById","modalImg","src","display","span","getElementsByClassName","onclick","renderImages","className","id","item","i","title","renderMain","href","target","isEmpty","map","propOr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as R from 'ramda'\nimport \"./GDImageViewer.css\";\n\nconst options = {\n  // react style object\n  // https://reactjs.org/docs/dom-elements.html#style\n\n  style: {\n  },\n  // behavior when image is clicked\n  // if on click is empty (no modal or newWindow)\n  // current tab will show full image\n  // if modal true, image opens as overlay\n  // on current tab\n  // if new window is true, new tab is launched\n  // with image url\n  onClick: {\n      modal: false,\n      newWindow: false\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  // specify which images not to render\n  exclude: {\n      \"1.jpg\": true\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach className attribute to a specific image\n  attachClass: {\n      \"2.jpg\": \"test\"\n  },\n  //Use name of <FILE_NAME>.<EXTENSION> (image.png) to\n  //attach id attribute to a specific image\n  attachId: {\n      \"2.jpg\": \"test2\"\n  },\n  // if set true, hover over opacity effect\n  // will be set\n  hover: true\n};\n\nexport const required_fields_object = {\n  gkey: \"{GOOGLE_API_KEY}\",\n  dirId: \"{GOOGLE_DRIVE_PUBLIC_DIRECTORY_ID}\",\n  name: \"name1\",\n  options: options,\n};\n\n\nfunction GDImageViewer(data) {\n  const [imgIds, setImgIds] = useState([]);\n\n  const [style, setStyle] = useState({});\n\n  const [hover, setHover] = useState(false);\n\n  const [newWindow, setNewWindw] = useState(false);\n\n  const [clickable, setClickable] = useState(false);\n\n  const [modal, setModal] = useState(false);\n\n  const [showHeader, setShowHeader] = useState(null);\n\n  const [classNames, setClassNames] = useState(null);\n\n  const [ids, setIds] = useState(null);\n\n  const [excludes, setExcludes] = useState(null);\n\n  const GOOGLE_API_KEY = data.data.gkey;\n  const GOOGLE_DRIVE_URL_START =\n    \"https://www.googleapis.com/drive/v2/files?q=%27\";\n  const GOOGLE_DRIVE_URL_END = \"%27+in+parents&key=\";\n  const GOOGLE_DRIVE_IMG_URL = \"http://drive.google.com/uc?export=view&id=\";\n\n  const options = data.data.options;\n  const header = data.data.header;\n  useEffect(() => {\n    loadData();\n    loadSettings(options);\n  }, []);\n\n  function loadSettings(options) {\n    if (options.style) {\n      setStyle(options.style);\n    }\n    if (options.onClick) {\n      setClickable(true);\n      if (options.onClick.newWindow) {\n        setNewWindw(true);\n      }\n      if (options.onClick.modal) {\n        setModal(true);\n      }\n    }\n    if (options.hover) {\n      setHover(true);\n    }\n    if (header) {\n      setShowHeader(true);\n    }\n\n    if (options.attachClass) {\n      setClassNames(options.attachClass);\n    }\n\n    if (options.attachId) {\n      setIds(options.attachId);\n    }\n    if (options.exclude) {\n      setExcludes(options.exclude);\n    }\n  }\n\n  async function loadData() {\n    await fetch(\n      GOOGLE_DRIVE_URL_START +\n      data.data.dirId +\n      GOOGLE_DRIVE_URL_END +\n      GOOGLE_API_KEY\n    )\n      .then(response => response.json())\n      .then(jsonResp => {\n        setImgIds(jsonResp.items);\n      });\n  }\n\n  function checkFormat(url) {\n    return url.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n  }\n\n  function ModalView(props) {\n    return (\n      <div>\n        <div id=\"modal-container\" className=\"modal\">\n          <span className=\"close\">&times;</span>\n          <img className=\"modal-content\" id=\"curr-modal\" alt=\"\" />\n          <div id=\"caption\" />\n        </div>\n      </div>\n    );\n  }\n\n  function showModal(imgId) {\n    const modal = document.getElementById(\"modal-container\");\n    const modalImg = document.getElementById(\"curr-modal\");\n    modalImg.src = imgId;\n    modal.style.display = \"block\";\n    const span = document.getElementsByClassName(\"close\")[0];\n    span.onclick = function () {\n      modal.style.display = \"none\";\n    };\n  }\n\n  const renderImages = (className, id, exclude, item ,i) => {\n    return (\n      <>\n        {!exclude && (\n          <img\n            style={style}\n            className={\n              (clickable ? \" gd-pointer \" : \"\") +\n              (\" gd-img \") +\n              (hover ? \" gd-pointer gd-hover \" : \"\") + className\n            }\n            onClick={() => {\n              modal && showModal(GOOGLE_DRIVE_IMG_URL + item.id);\n            }}\n            src={GOOGLE_DRIVE_IMG_URL + item.id}\n            id={id ? id : null}\n            key={i}\n            alt={item.title}\n          />\n        )}\n      </>\n    )\n\n  }\n\n  const renderMain = (className, id, exclude, href, target, item, i) => {\n    if (!R.isEmpty(href)) {\n      return (\n        <a\n          href={href}\n          target={target}\n        >\n          {renderImages(className, id, exclude, item, i)}\n        </a>\n      )\n    }\n    return (\n      renderImages(className, id, exclude, item, i)\n    )\n  }\n\n  return (\n    <div>\n      <h2>{showHeader && header}</h2>\n\n      {modal && <ModalView />}\n\n      {imgIds &&\n        imgIds.map((item, i) => {\n          const title = R.propOr(\"\", \"title\", item)\n          if (checkFormat(item.title)) {\n            const className = R.propOr(\"\", title, classNames)\n            const id = R.propOr(\"\", title, ids)\n            const exclude = R.propOr(\"\", title, excludes);\n            const href = !modal && clickable ? GOOGLE_DRIVE_IMG_URL + item.id : \"\"\n            const target = newWindow ? \"_blank\" : \"\"\n            return(renderMain(className, id, exclude, href, target, item, i))\n          }\n        })}\n    </div>\n  );\n}\n\nexport default GDImageViewer;\n"]},"metadata":{},"sourceType":"module"}